# -*- coding: utf-8 -*-
"""the-data-set-of-flower-images-r.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L20tczZ-VaIKWyq9UiP0Ee0w241ZuMwJ
"""

conn<-file('notebook_styling.R')
writeLines(paste0(
    "IRdisplay::display_html('<style>@import ",intToUtf8(34),
    "https://fonts.googleapis.com/css?family=Ewert|Roboto&effect=3d",
    intToUtf8(34),"; body {background:gainsboro;}",
    "span {text-shadow:4px 4px 4px #aaa;}",
    "div.output_prompt {color:slategray; font-family:Ewert;}",
    "div.output_area pre {color:slategray;}",
    "div.input_prompt {color:#ff355e; font-family:Ewert;}",
    "div.output_subarea {color:#ff355e;}",     
    "div.output_stderr pre {background-color:gainsboro;}", 
    "div.output_stderr {background-color:slategrey;}",  
    "</style>')"),conn)

conn<-file('header_styling.R')
writeLines(paste0("dhtml<-function(str) {
    IRdisplay::display_html(paste0(c(
'<style>@import ",intToUtf8(34),"https://fonts.googleapis.com/css?",
"family=Ewert|Roboto&effect=3d",intToUtf8(34),"; ',
'</style><h1 class=",intToUtf8(34),"font-effect-3d",intToUtf8(34),
" style=",intToUtf8(34),"font-family:Ewert; color:#ff355e;",
 intToUtf8(34),"> &#x1F310; &nbsp;',str,'</h1>'),collapse='')) }"),
conn)

source('header_styling.R')
dhtml('Styling, Links and Modules')

source('notebook_styling.R')

"""#### [Keras](https://keras.rstudio.com/) & [Training Visualization](https://cran.r-project.org/web/packages/keras/vignettes/training_visualization.html) & [Getting started with imager](https://dahtah.github.io/imager/gettingstarted.html)
#### [Extended version. Python](https://olgabelitskaya.github.io/kaggle_flowers.html) & [Extended version. R](https://olgabelitskaya.github.io/kaggle_flowers_R.html)
#### [Github Repository](https://github.com/OlgaBelitskaya/deep_learning_projects/tree/master/DL_PP0) & [Colaboratory Version](https://colab.research.google.com/drive/1H2ArWH_1kYfkIoCbxleX-aHAozRVBAdB)
"""

dhtml('Data Exploration')

conn<-file('load_flower_data.R')
writeLines("
file_path<-paste0('../input/flower-color-images/',
                  'flower_images/flower_images')
flowers<-read.csv(paste0(file_path,'/flower_labels.csv'))
n<-nrow(flowers)
flower_labels<-as.matrix(flowers['label'])
image_paths<-list.files(
    file_path,recursive=TRUE,full.names=TRUE)
image_paths<-image_paths[1:(length(image_paths)-1)]
image_loading<-function(image_path) {
    image<-keras::image_load(image_path,target_size=c(128,128))
    image<-keras::image_to_array(image)/255
    image<-keras::array_reshape(image,c(1,dim(image)))
    return(image) }
flower_images<-lapply(image_paths,image_loading)
flower_images<-keras::array_reshape(
    flower_images,c(-1,128,128,3))
print(paste0(c('image array: ',dim(flower_images),
             '; label array: ',dim(flower_labels)),
             collapse=' ')); cat('\n\n')
print(tail(image_paths)); cat('\n\n')
print(t(head(flowers))); cat('\n\n')
dd<-c(-1,128*128*3); indices<-sample(1:n)
train_indices<-indices[1:round(.7*n)]
valid_indices<-indices[(round(.7*n)+1):round(.85*n)]
test_indices<-indices[(round(.85*n)+1):n]
flower_images<-keras::array_reshape(flower_images,dd)
x_train<-flower_images[train_indices,]
x_train<-keras::array_reshape(x_train,c(-1,128,128,3))
y_train<-flower_labels[train_indices]
x_valid<-flower_images[valid_indices,]
x_valid<-keras::array_reshape(x_valid,c(-1,128,128,3))
y_valid<-flower_labels[valid_indices]
x_test<-flower_images[test_indices,]
x_test<-keras::array_reshape(x_test,c(-1,128,128,3))
y_test<-flower_labels[test_indices]
print(paste0(c('processed image arrays: ',dim(x_train),', ',
               dim(x_valid),', ',dim(x_test)),collapse=' '))
print(paste0(c('processed label arrays: ',length(y_train),', ',
               length(y_valid),', ',length(y_test)),
             collapse=' '))
",conn)

source('load_flower_data.R')

library(magrittr)
par(mar=c(2,2,2,2))
options(repr.plot.width=6,repr.plot.height=3)
flower_labels[,1] %>% 
    table() %>% barplot(col=rainbow(10,start=.52,end=1))

conn<-file('display_flower_data.R')
writeLines("
file_path<-paste0('../input/flower-color-images/',
                  'flower_images/flower_images/')
img_path<-paste0(file_path,'0001.png')
img<-keras::image_load(img_path,target_size=c(128,128))
img<-keras::image_to_array(img)/255
im<-imager::load.image(img_path)
str<-c('keras: ',dim(img),'; imager: ',dim(im))
cat(paste0(str,collapse=' '))
options(repr.plot.width=6,repr.plot.height=6)
par(mar=c(2,2,2,2),mfrow=c(2,2))
plot(im,axes=FALSE); plot(as.raster(img))
gray_img<-keras::image_load(
    img_path,target_size=c(128,128),grayscale=TRUE)
gray_img<-keras::image_to_array(gray_img)/255
gray_img<-keras::array_reshape(gray_img,c(128,128))
cat(paste0(c('keras grayscale: ',dim(gray_img))))
image(c(1:128),c(1:128),gray_img,
      col=grey(seq(0,1,length=256)))",conn)

source('display_flower_data.R')

dhtml('Classification Models')

conn<-file('keras_callbacks.R')
writeLines("
library(keras)
model_weights<-'/checkpoints'
cb<-function(model_weights){
    checkpoint<-callback_model_checkpoint(
        model_weights,monitor='val_loss',mode='min',
        save_best_only=TRUE,save_weights_only=TRUE)
    reduce_lr<-callback_reduce_lr_on_plateau(
        monitor='val_loss',factor=.75)
    early_stopping<-callback_early_stopping(
        monitor='val_acc',patience=120)
    return(list(checkpoint,reduce_lr,early_stopping))}
",conn)

conn<-file('display_keras_history.R')
writeLines("
library(keras)
display_keras_history<-function(history) {
    options(repr.plot.width=6,repr.plot.height=4,warn=-1)
    theme<-ggplot2::theme_grey()
    scale_fill<-ggplot2::scale_fill_manual(
        values=c('slategray','#ff355e'))
    scale_color<-ggplot2::scale_color_manual(
        values=c('slategray','#ff355e'))
    plot(history,metrics=c('loss','acc','lr'))+
    scale_fill+scale_color+theme }
",conn)

conn<-file('mlp_model.R')
writeLines("
library(magrittr); library(keras)
mlp_model<-keras_model_sequential()
mlp_model %>%  
layer_dense(128,input_shape=c(128*128*3)) %>%  
layer_activation_leaky_relu(.2) %>%  
layer_batch_normalization() %>%  
layer_dense(256) %>%  
layer_activation_leaky_relu(.2) %>%  
layer_batch_normalization() %>%
layer_dense(512) %>%  
layer_activation_leaky_relu(.2) %>%  
layer_batch_normalization() %>%
layer_dense(1024) %>%  
layer_activation('relu') %>%  
layer_dropout(.2) %>% 
layer_dense(10) %>%    
layer_activation('softmax')
mlp_model %>%
    compile(loss='sparse_categorical_crossentropy',
            optimizer='adam',metrics='accuracy')
mlp_fit<-mlp_model %>%
    fit(x=array_reshape(x_train,dd),y=y_train,shuffle=TRUE,
        batch_size=24,epochs=120,callbacks=cb(model_weights),
        validation_data=list(array_reshape(x_valid,dd),y_valid))
",conn)

source('keras_callbacks.R')
source('mlp_model.R')
summary(mlp_model)

source('display_keras_history.R')
display_keras_history(mlp_fit)

as.data.frame(mlp_fit)[341:360,]

load_model_weights_hdf5(mlp_model,model_weights)
mlp_model %>% 
    evaluate(array_reshape(x_test,dd),y_test)

conn<-file('cnn_model.R')
writeLines("
library(magrittr); library(keras)
cnn_model<-keras_model_sequential()
cnn_model %>%  
layer_conv_2d(
    filter=32,kernel_size=c(7,7),padding='same',
    input_shape=c(128,128,3)) %>%  
layer_activation_leaky_relu(.2) %>%  
layer_max_pooling_2d(pool_size=c(2,2)) %>%  
layer_dropout(.25) %>%
layer_conv_2d(
    filter=96,kernel_size=c(7,7),padding='same') %>% 
layer_activation_leaky_relu(.2) %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%  
layer_dropout(.25) %>%
layer_global_average_pooling_2d() %>%  
layer_dense(1024) %>%  
layer_activation('tanh') %>%  
layer_dropout(.25) %>%  
layer_dense(64) %>%  
layer_activation('tanh') %>%  
layer_dropout(.25) %>%
layer_dense(10) %>%    
layer_activation('softmax')
cnn_model %>%
    compile(loss='sparse_categorical_crossentropy',
            optimizer='nadam',metrics='accuracy')
cnn_fit<-cnn_model %>%
    fit(x=x_train,y=y_train,shuffle=TRUE,
        batch_size=16,epochs=150,callbacks=cb(model_weights),
        validation_data=list(x_valid,y_valid))
",conn)

source('keras_callbacks.R')
source('cnn_model.R')
summary(cnn_model)

source('display_keras_history.R')
display_keras_history(cnn_fit)

as.data.frame(cnn_fit)[431:450,1:4]

load_model_weights_hdf5(cnn_model,model_weights)
cnn_model %>% evaluate(x_test,y_test)

conn<-file('rnn_model.R')
writeLines("
rnn_model<-keras_model_sequential()
rnn_model %>% 
layer_lstm(196,return_sequences=TRUE,
           input_shape=c(1,128*128*3)) %>%  
layer_lstm(196,return_sequences=TRUE) %>%
layer_lstm(196) %>%
layer_dense(512) %>%
layer_activation('relu') %>%
layer_dense(10) %>%    
layer_activation('softmax')
rnn_model %>%
    compile(loss='sparse_categorical_crossentropy',
            optimizer='adam',metrics='accuracy')
dd2<-c(-1,1,128*128*3)
rnn_fit<-rnn_model %>%
    fit(x=array_reshape(x_train,dd2),y=y_train,shuffle=TRUE,
        batch_size=64,epochs=200,callbacks=cb(model_weights),
        validation_data=list(array_reshape(x_valid,dd2),y_valid))
",conn)

source('keras_callbacks.R')
source('rnn_model.R')
summary(rnn_model)

source('display_keras_history.R')
display_keras_history(rnn_fit)

as.data.frame(rnn_fit)[531:550,1:4]

load_model_weights_hdf5(rnn_model,model_weights)
rnn_model %>% evaluate(array_reshape(x_test,dd2),y_test)