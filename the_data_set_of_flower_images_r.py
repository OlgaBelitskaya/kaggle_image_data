# -*- coding: utf-8 -*-
"""the-data-set-of-flower-images-r.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L20tczZ-VaIKWyq9UiP0Ee0w241ZuMwJ

<h1 class='font-effect-3d' style='font-family:Ewert; color:#ff355e;'> &#x1F310; &nbsp; Styling, Links and Modules</h1>

---

#### [Keras](https://keras.rstudio.com/) & [Training Visualization](https://cran.r-project.org/web/packages/keras/vignettes/training_visualization.html) & [Getting started with imager](https://dahtah.github.io/imager/gettingstarted.html)
#### [Extended version. Python](https://olgabelitskaya.github.io/kaggle_flowers.html) & [Extended version. R](https://olgabelitskaya.github.io/kaggle_flowers_R.html)
#### [Github Repository](https://github.com/OlgaBelitskaya/deep_learning_projects/tree/master/DL_PP0) & [Colaboratory Version](https://colab.research.google.com/drive/1H2ArWH_1kYfkIoCbxleX-aHAozRVBAdB)
"""

library(IRdisplay); library(repr)
library(tensorflow); library(keras)
library(imager); library(R6)

display_html("<style> 
@import url('https://fonts.googleapis.com/css?family=Ewert|Roboto&effect=3d'); 
a,h4 {color:slategray; font-family:Roboto; text-shadow:4px 4px 4px #aaa;}
span {color:black; font-family:Roboto; text-shadow:4px 4px 4px #aaa;}
div.output_prompt,div.output_area pre {color:slategray;}
div.input_prompt,div.output_subarea {color:#ff355e;}      
div.output_stderr pre {background-color:gainsboro;}  
div.output_stderr {background-color:slategrey;}     
</style>")

"""<h1 class='font-effect-3d' style='font-family:Ewert; color:#ff355e;'> &#x1F310; &nbsp; Data Exploration </h1>"""

fpath<-"../input/flower_images/flower_images"
flowers<-read.csv(paste0(fpath,"/flower_labels.csv"))
n<-nrow(flowers); head(flowers)

flower_labels<-as.matrix(flowers["label"])
options(repr.plot.width=6,repr.plot.height=3)
par(mar=c(2,2,2,2))
flower_labels[,1] %>% 
    table() %>% barplot(col=rainbow(10,start=.52,end=1))
flower_labels<-keras::to_categorical(flower_labels,10)

image_paths<-list.files(fpath,recursive=TRUE,full.names=TRUE)
image_paths<-image_paths[1:(length(image_paths)-1)]
image_paths[3:4]

img_path<-paste0(fpath,"/0001.png")
img<-keras::image_load(img_path,target_size=c(128,128))
img<-image_to_array(img)/255
img<-array_reshape(img,c(1,128,128,3)); dim(img)
par(mar=c(2,2,2,2)); im<-load.image(img_path)
options(repr.plot.width=4,repr.plot.height=4)
dim(im); plot(im)

gray_img<-array_reshape(grayscale(img),c(128,128))
options(repr.plot.width=4,repr.plot.height=4)
par(mar=c(2,2,2,2)); dim(gray_img)
image(c(1:128),c(1:128),gray_img,
      col=grey(seq(0,1,length=256)))

image_loading<-function(image_path) {
    image<-keras::image_load(image_path,target_size=c(128,128))
    image<-image_to_array(image)/255
    image<-array_reshape(image,c(1,dim(image)))
    return(image) }

flower_images<-lapply(image_paths,image_loading)
flower_images<-array_reshape(flower_images,c(-1,128,128,3))
c(dim(flower_images),dim(flower_labels))

dd<-c(-1,128*128*3); indices<-sample(1:n)
train_indices<-indices[1:round(.7*n)]
valid_indices<-indices[(round(.7*n)+1):round(.85*n)]
test_indices<-indices[(round(.85*n)+1):n]
flower_images<-array_reshape(flower_images,dd)
x_train<-flower_images[train_indices,]
x_train<-array_reshape(x_train,c(-1,128,128,3))
y_train<-flower_labels[train_indices,]
x_valid<-flower_images[valid_indices,]
x_valid<-array_reshape(x_valid,c(-1,128,128,3))
y_valid<-flower_labels[valid_indices,]
x_test<-flower_images[test_indices,]
x_test<-array_reshape(x_test,c(-1,128,128,3))
y_test<-flower_labels[test_indices,]
c(dim(x_train),dim(x_valid),dim(x_test),
  dim(y_train),dim(y_valid),dim(y_test))

"""<h1 class='font-effect-3d' style='font-family:Ewert; color:#ff355e;'> &#x1F310; &nbsp; Classification Models </h1>"""

mlp_model<-keras_model_sequential()
mlp_model %>%  
layer_dense(128,input_shape=c(128*128*3)) %>%  
layer_activation("relu") %>%  
layer_batch_normalization() %>%  
layer_dense(256) %>%  
layer_activation("relu") %>%  
layer_batch_normalization() %>%
layer_dense(512) %>%  
layer_activation("relu") %>%  
layer_batch_normalization() %>%
layer_dense(1024) %>%  
layer_activation("relu") %>%  
layer_dropout(.2) %>% 
layer_dense(10) %>%    
layer_activation("softmax")
mlp_model %>%
    compile(loss="categorical_crossentropy",
            optimizer="adam",metrics="accuracy")
summary(mlp_model)

cb<-list(callback_model_checkpoint("mlp_best_flowers.h5",
                                   save_best_only=T),
         callback_reduce_lr_on_plateau(monitor="val_loss",
                                       factor=.75)) 
mlp_fit<-mlp_model %>%
    fit(x=array_reshape(x_train,dd),y=y_train,
        shuffle=T,batch_size=24,epochs=120,callbacks=cb,
        validation_data=list(array_reshape(x_valid,dd),y_valid))

options(repr.plot.width=9,repr.plot.height=4)
plot(mlp_fit)

mlp_fit_df<-as.data.frame(mlp_fit)
mlp_fit_df[341:360,]

load_model_weights_hdf5(mlp_model,"mlp_best_flowers.h5")
mlp_model %>% 
    evaluate(array_reshape(x_test,dd),y_test)

cnn_model<-keras_model_sequential()
cnn_model %>%  
layer_conv_2d(filter=32,
              kernel_size=c(7,7),padding="same",
              input_shape=c(128,128,3)) %>%  
layer_activation("relu") %>%  
layer_max_pooling_2d(pool_size=c(2,2)) %>%  
layer_dropout(.25) %>%
layer_conv_2d(filter=96,
              kernel_size=c(7,7),padding="same") %>% 
layer_activation("relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%  
layer_dropout(.25) %>%
layer_global_average_pooling_2d() %>%  
layer_dense(1024) %>%  
layer_activation("tanh") %>%  
layer_dropout(.25) %>%  
layer_dense(64) %>%  
layer_activation("tanh") %>%  
layer_dropout(.25) %>%
layer_dense(10) %>%    
layer_activation("softmax")
cnn_model %>%
    compile(loss="categorical_crossentropy",
            optimizer="nadam",metrics="accuracy")
summary(cnn_model)

cb<-list(callback_model_checkpoint("cnn_best_flowers.h5",
                                   save_best_only=T),
         callback_reduce_lr_on_plateau(monitor="val_loss",
                                       factor=.75))        
cnn_fit<-cnn_model %>%
    fit(x=x_train,y=y_train,shuffle=T,
        batch_size=16,epochs=150,callbacks=cb,
        validation_data=list(x_valid,y_valid))

options(repr.plot.width=9,repr.plot.height=4)
plot(cnn_fit)

cnn_fit_df<-as.data.frame(cnn_fit)
cnn_fit_df[431:450,1:4]

load_model_weights_hdf5(cnn_model,"cnn_best_flowers.h5")
cnn_model %>% evaluate(x_test,y_test)

rnn_model<-keras_model_sequential()
rnn_model %>% 
layer_lstm(196,return_sequences=T,
           input_shape=c(1,128*128*3)) %>%  
layer_lstm(196,return_sequences=T) %>%
layer_lstm(196) %>%
layer_dense(512) %>%
layer_activation("relu") %>%
layer_dense(10) %>%    
layer_activation("softmax")
rnn_model %>%
    compile(loss="categorical_crossentropy",
            optimizer="adam",metrics="accuracy")
summary(rnn_model)

cb<-list(callback_model_checkpoint("rnn_best_flowers.h5",
                                   save_best_only=T),
         callback_reduce_lr_on_plateau(monitor="val_loss",
                                       factor=.75))
dd2<-c(-1,1,128*128*3)
rnn_fit<-rnn_model %>%
    fit(x=array_reshape(x_train,dd2),y=y_train,
        shuffle=T,batch_size=64,epochs=150,callbacks=cb,
        validation_data=list(array_reshape(x_valid,dd2),y_valid))

options(repr.plot.width=9,repr.plot.height=4)
plot(rnn_fit)

rnn_fit_df<-as.data.frame(rnn_fit)
rnn_fit_df[431:450,1:4]

load_model_weights_hdf5(rnn_model,"rnn_best_flowers.h5")
rnn_model %>% evaluate(array_reshape(x_test,dd2),y_test)